package com.scottkrulcik.agnostic.processor;

import javax.annotation.Nullable;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;

import static com.google.common.base.Preconditions.checkState;
import static java.util.Arrays.asList;

/**
 * Intermediate representation of a policy rule. Policy rules are formed through three distinct
 * annotations: {@link com.scottkrulcik.agnostic.annotations.Restrict},
 * {@link com.scottkrulcik.agnostic.annotations.Restriction}, and {@link com.scottkrulcik.agnostic.annotations.SafeDefault}
 * <p>
 * This was originally generated by
 * <a href="https://github.com/google/auto/tree/master/value">AutoValue</a> then adapted. Notably,
 * the {@link Builder} class is given a label-only equality semantics so it can be used in a map.
 */
final class PolicyRule {

    private final String label;
    private final Element accessor;
    private final Element predicate;
    private final Element safeDefault;

    private PolicyRule(
        String label,
        Element accessor,
        Element predicate,
        // TODO(skrulcik): remove nullable once safe defaults are re-implemented using annotations
        @Nullable Element safeDefault) {
        this.label = label;
        this.accessor = accessor;
        this.predicate = predicate;
        this.safeDefault = safeDefault;
    }

    String label() {
        return label;
    }

    Element accessor() {
        return accessor;
    }

    Element predicate() {
        return predicate;
    }

    @Nullable
    Element safeDefault() {
        return safeDefault;
    }

    @Override
    public String toString() {
        return "PolicyRule{"
            + "label=" + label + ", "
            + "accessor=" + accessor + ", "
            + "predicate=" + predicate + ", "
            + "safeDefault=" + safeDefault
            + "}";
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof PolicyRule) {
            PolicyRule that = (PolicyRule) o;
            return (this.label.equals(that.label()))
                && (this.accessor.equals(that.accessor()))
                && (this.predicate.equals(that.predicate()))
                && ((this.safeDefault == null) ? (that.safeDefault() == null) : this.safeDefault.equals(that.safeDefault()));
        }
        return false;
    }

    @Override
    public int hashCode() {
        int h = 1;
        h *= 1000003;
        h ^= this.label.hashCode();
        h *= 1000003;
        h ^= this.accessor.hashCode();
        h *= 1000003;
        h ^= this.predicate.hashCode();
        h *= 1000003;
        h ^= (safeDefault == null) ? 0 : this.safeDefault.hashCode();
        return h;
    }

    static Builder builder(String label) {
        return new PolicyRule.Builder(label);
    }

    static final class Builder {
        private final String label;
        private Element accessor;
        private Element predicate;
        private Element safeDefault;

        Builder(String label) {
            this.label = label;
        }

        PolicyRule.Builder setAccessor(Element accessor) {
            if (accessor == null) {
                throw new NullPointerException("Null accessor");
            }
            this.accessor = accessor;
            return this;
        }

        PolicyRule.Builder setPredicate(Element predicate) {
            if (predicate == null) {
                throw new NullPointerException("Null predicate");
            }
            this.predicate = predicate;
            return this;
        }

        PolicyRule.Builder setSafeDefault(@Nullable Element safeDefault) {
            this.safeDefault = safeDefault;
            return this;
        }

        PolicyRule build() {
            String missing = "";
            if (this.label == null) {
                missing += " label";
            }
            if (this.accessor == null) {
                missing += " accessor";
            }
            if (this.predicate == null) {
                missing += " predicate";
            }
            if (!missing.isEmpty()) {
                throw new IllegalStateException("Missing required properties:" + missing);
            }
            validateElements();
            return new PolicyRule(
                this.label,
                this.accessor,
                this.predicate,
                this.safeDefault);
        }

        void validateElements() {
            checkState(accessor.getKind().equals(ElementKind.METHOD));
            checkState(predicate.getKind().equals(ElementKind.METHOD));

            checkState(accessor.getModifiers().contains(Modifier.ABSTRACT));
            checkState(predicate.getModifiers().containsAll(asList(Modifier.FINAL, Modifier.PUBLIC)));

            // TODO(skrulcik): remove nullable once safe defaults are re-implemented using annotations
            if (safeDefault != null) {
                checkState(safeDefault.getKind().equals(ElementKind.FIELD));
                checkState(safeDefault.getModifiers().containsAll(asList(Modifier.FINAL, Modifier.STATIC)));
            }
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (o instanceof PolicyRule.Builder) {
                PolicyRule.Builder that = (PolicyRule.Builder) o;
                return this.label.equals(that.label);
            }
            return false;
        }

        @Override
        public int hashCode() {
            int h = 1;
            h *= 1000003;
            h ^= this.label.hashCode();
            return h;
        }

    }

}
